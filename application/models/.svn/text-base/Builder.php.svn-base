<?php
class Default_Model_Builder
{
    protected $_sessionData = null;
    protected $_colunms = null;

    public function  __construct($data = null) {
        $config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini' , "report" );
        $db     = Zend_Db::factory($config->db);
        
        Zend_Db_Table_Abstract::setDefaultAdapter($db);

        if ($data) {
            $this->_sessionData = (object) unserialize($data);
        } else {
            $this->_sessionData = new Zend_Session_Namespace('report');
        }
    }

    public function clear() {
        $this->_sessionData->data      = null;
        $this->_sessionData->join      = null;
        $this->_sessionData->filter    = null;
        $this->_sessionData->order     = null;
        $this->_sessionData->aggregate = null;
        $this->_sessionData->column    = null;
    }

    public function add(array $info) {
        $this->_sessionData->data[] = $info;
    }

    public function addJoin(array $join) {
        $this->_sessionData->join[] = $join;
    }

    public function addOrder($colunm, $direction, $add = "false") {
        if ($add == "false") {
            $this->_sessionData->order = null;
        }

        $this->_sessionData->order[] = array('colunm' => $colunm,
            'direction' => $direction);
    }

    public function addFilter($colunm, $value, $operator = "=", $logic = null) {
        if (!$logic) {
            $this->_sessionData->filter = null;
        }

        $this->_sessionData->filter[] = array('colunm'   => $colunm,
                                              'value'    => $value,
                                              'operator' => $operator,
                                              'logic'    => $logic);
    }

    public function addAggregate($colunm) {
        $this->_sessionData->order = null;
        $this->_sessionData->aggregate[$colunm] = $colunm;
    }

    public function addColumn($colunm) {
        $this->_sessionData->column[$colunm] = $colunm;
    }

    public function remove($index) {
        unset($this->_sessionData->data[$index]);
    }

    public function fetchAll($page = 1, $itemPerPage = 20) {
        $db = Zend_Db_Table_Abstract::getDefaultAdapter();
        $select = $db->select();
        $colunms = array();
        $groupBy = array();
        $name    = $this->getAdapterName();

        foreach ($this->_sessionData->data as $key => $data) {
            if ($key == 0) {
                $table = $data['table'];
                $schema = $data['schema'];
            }

            if ( array_key_exists($key.'a', (array)$this->_sessionData->aggregate) ) {
                $colunms[$key.'a'] = 'count('.$data['table'].'.'.$data['colunm'].')';
            } else {
                $groupBy[$key.'a'] = $data['table'].'.'.$data['colunm'];
                $colunms[$key.'a'] = $data['table'].'.'.$data['colunm'];
            }

            $tables[$key.'a'] = $data['table'];
            $schemas[$key.'a'] = $data['schema'];
        }

        if (isset($this->_sessionData->column)) {
            foreach ($this->_sessionData->column as $value) {
                $selectColumn = $db->select();
                $selectColumn->distinct()
                    ->from($tables[$value], $colunms[$value], $schemas[$value])
                    ->order($colunms[$value]);

                $resultColumn = $db->fetchAll($selectColumn);

                foreach ($resultColumn as $key => $val) {
                    $colunms[$value.$key.'b'] = "COUNT(CASE WHEN "
                        . $colunms[$value]."='".current($val)."' "
                        . "THEN 1 ELSE null END)";
                }

                //$groupBy[] = $colunms[$value];
                unset($colunms[$value]);
                unset($groupBy[$value]);
            }
        }

        $this->_colunms = $colunms;

        $select->from($table, $colunms, $schema);

        //Make joins
        if (isset($this->_sessionData->join)) {
            foreach ($this->_sessionData->join as $join) {
                if (isset($join['via'])) {
                    if ($name == 'mysql') {
                        $join['via']['on'] = str_replace('"',"`",$join['via']['on']);
                    }
                    $select->join($join['via']['table'],$join['via']['on'], array(), $join['via']['schema']);
                }
                if ($name == 'mysql') {
                    $join['on'] = str_replace('"',"`",$join['on']);
                }
                $select->join($join['table'], $join['on'], array(), $join['schema']);
            }
        }

        //Make orders
        $stringOrder = null;
        if (count($this->_sessionData->order) > 0) {
            $orders = array();
            foreach ($this->_sessionData->order as $order) {
                $colunm    = $order['colunm'];
                $direction = $order['direction'];
                $orders[]  = $colunm.' '.$direction;
            }

            $stringOrder = $orders;
        } else {
            $colunm    = $this->_colunms['0a'];
            $direction = 'ASC';

            $this->_sessionData->order[] = array('colunm' => $colunm,
                                                 'direction' => $direction);

            if (count($this->_sessionData->aggregate) > 0) {
                $stringOrder = $colunm.' '.$direction;
            }
        }

        $select->order($stringOrder);

        //Make filters
        if (count($this->_sessionData->filter) > 0) {
            foreach ($this->_sessionData->filter as $filter) {
                if (strpos($filter['colunm'], 'count') !== false) {
                    if ($filter['logic'] == 'OR') {
                        $select->orHaving($filter['colunm'] . $filter['operator'] . '?',$filter['value']);
                    } else {
                        $select->having($filter['colunm'] . $filter['operator'] . '?',$filter['value']);
                    }
                } else {
                    if ($filter['logic'] == 'OR') {
                        $select->orWhere($filter['colunm'] . $filter['operator'] . '?',$filter['value']);
                    } else {
                        $select->where($filter['colunm'] . $filter['operator'] . '?',$filter['value']);
                    }
                }
            }
        }

        //Make groupBy
        if (count($groupBy) > 0) {
            $select->group($groupBy);
        }

        $paginator = Zend_Paginator::factory($select);
        $paginator->setCurrentPageNumber($page);
        $paginator->setItemCountPerPage($itemPerPage);

        Zend_View_Helper_PaginationControl::setDefaultViewPartial('page.phtml');
        //debug($select->__toString(),1);
        //debug($db->fetchAll($select));
        return $paginator;
    }

    public function getSelectedColunms() {
        return $this->_colunms;
    }

    public function listTables() {
        $db = Zend_Db_Table_Abstract::getDefaultAdapter();
        $tables = $db->listTables();

        foreach($tables as $key => $value) {
            $table     = new Zend_Db_Table($value);
            $info      = $table->info();
            $countCols = count($info['cols']);
            $countPk   = count($info['primary']);

            if ($countPk == $countCols) {
                continue;
            }
            
            $metadata = current($info['metadata']);
            $countFks = count($this->getReference($metadata['SCHEMA_NAME'],
                                                      $metadata['TABLE_NAME']));
            if ($countFks == $countCols) {
                continue;
            }

            if (($countCols - $countFks) == 1) {
                if (count($countPk) == 1) {
                    continue;
                }
            }
            
            $result[] = array('name'   => $metadata['TABLE_NAME'],
                              'schema' => $metadata['SCHEMA_NAME']);
        }

        return $result;
    }

    public function getTreeColunms($schema,$table) {
        $foreignCols = array();
        $foreignFields = array();
        $result = array();

        $foreigns = $this->getReference($schema, $table);

        foreach($foreigns as $value) {
            $schema = $value['reference_schema'];
            $table = $value['reference_table'];

            $dbTable = new Zend_Db_Table(array('name' => $table, 'schema' => $schema));
            $info = $dbTable->info();

            $foreignsRel = $this->getReference($schema, $table);

            $selfFields = array_diff($info['cols'], $info['primary']);

            if( count($selfFields) == 0 ) {
                debug(count($selfFields));
            }

            foreach($foreignsRel as $valueRel) {
                $foreignCols[] = $valueRel['column'];
            }

            $fields = array_diff($selfFields, $foreignCols);

            foreach($fields as $field) {
                $colunm = $info['metadata'][$field];
                $result[] = array('colunm' => $colunm['COLUMN_NAME'],
                                  'table'  => $colunm['TABLE_NAME'],
                                  'schema' => $colunm['SCHEMA_NAME']);
            }
        }
        return $result;
    }

    public function getRelationTables($schema, $table) {
        $result = array();
        $via = array();

        $dbTable = new Zend_Db_Table(array('name' => $table, 'schema' => $schema));
        $info = $dbTable->info();

        $field = $info['primary'][1];

        $references = $this->getReference($schema, $table);
        $dependent  = $this->getDependent($schema, $table, $field);

        foreach ($references as $value) {
            $result[] = array('table'  => $value['reference_table'],
                              'schema' => $value['reference_schema'],
                              'on'     => '"'.$table.'"."'.$value['column'].'"'
                                       .  '="'.$value['reference_table'].'"."'.$value['reference_column'].'"');
        }

        foreach ($dependent as $value) {
            $foreignCols = array();
            $dbTable = new Zend_Db_Table(array('name'   => $value['table'],
                                               'schema' => $value['schema']));
            $info = $dbTable->info();

            $foreignsRel = $this->getReference($value['schema'], $value['table']);

            foreach ($foreignsRel as $valueRel) {
                $foreignCols[] = $valueRel['column'];
            }

            $selfFields = array_diff($foreignCols, $info['primary']);

            if (count($selfFields) == 0) {
                $references = $this->getReference($value['schema'], $value['table']);

                foreach($references as $val) {
                    if ( $val['reference_table'] != $table) {
                        $via = array('table'  => $value['table'],
                                     'schema' => $value['schema'],
                                     'on'     => '"'.$value['table'].'"."'.$value['column'].'"'
                                              .  '="'.$table.'"."'.$field.'"');

                        $result[] = array('table'  => $val['reference_table'],
                            'schema' => $val['reference_schema'],
                            'on'     => '"'.$value['table'].'"."'.$val['column'].'"'
                                     .  '="'.$val['reference_table'].'"."'.$val['reference_column'].'"',
                            'via'    => $via);


                    }
                }
            } else {
                $result[] = array('table'  => $value['table'],
                                  'schema' => $value['schema'],
                                  'on'     => '"'.$value['table'].'"."'.$value['column'].'"'
                                           .  '="'.$table.'"."'.$field.'"');
            }
        }

        return $result;
    }

    public function getOrders() {
        return $this->_sessionData->order;
    }

    public function getFilters() {
        return $this->_sessionData->filter;
    }

    public function getAggregates() {
        return $this->_sessionData->aggregate;
    }

    public function getColunms($schema, $table) {
        $dbTable = new Zend_Db_Table(array('name' => $table, 'schema' => $schema));
        $result = array();
        $foreignCols = array();

        $info = $dbTable->info();
        $foreigns = $this->getReference($schema, $table);

        foreach($foreigns as $value) {
            $foreignCols[] = $value['column'];
        }

        $selfFields = array_diff($info['cols'], $info['primary']);
        $fields = array_diff($selfFields, $foreignCols);

        foreach($fields as $field) {
            $colunm = $info['metadata'][$field];
            $result[] = array('colunm'=>$colunm['COLUMN_NAME'],
                'table'=>$colunm['TABLE_NAME'],
                'schema'=>$colunm['SCHEMA_NAME']);
        }

        return $result;
    }

    public function getReference($schema, $table)
    {
        $className = get_class(Zend_Db_Table::getDefaultAdapter());
        
        if (strstr($className, 'Pgsql')) {
            return Default_Model_Pgsql::getReference($schema, $table);
        } else {
            return Default_Model_Mysql::getReference($schema, $table);
        }
    }

    public function getDependent($schema, $table, $field = 'id')
    {
        $name = $this->getAdapterName();
        
        if ($name == 'pgsql') {
            return Default_Model_Pgsql::getDependent($schema, $table, $field);
        } else {
            return Default_Model_Mysql::getDependent($schema, $table, $field);
        }
    }

    public function getAdapterName()
    {
        $className = get_class(Zend_Db_Table::getDefaultAdapter());

        if (strstr($className, 'Pgsql')) {
            return 'pgsql';
        } elseif(strstr($className, 'Mysql')) {
            return 'mysql';
        } else {
            return false;
        }
    }
}